import fs from 'fs';
import path from 'path';

// --- Configuration ---
const IMAGES_DIR = './assets/images';
const OUTPUT_FILE = './assets/imageMap.mjs'; 
// -------------------

// This will hold the final structure, but with placeholders for require calls
const imageMapStructure = {};

try {
    if (!fs.existsSync(IMAGES_DIR)) {
        throw new Error(`The specified images directory does not exist: ${IMAGES_DIR}`);
    }

    const restaurantFolders = fs.readdirSync(IMAGES_DIR, { withFileTypes: true });

    for (const restaurantFolder of restaurantFolders) {
        if (restaurantFolder.isDirectory()) {
            const restaurantName = restaurantFolder.name;
            const restaurantPath = path.join(IMAGES_DIR, restaurantName);
            imageMapStructure[restaurantName] = {};
            imageMapStructure[restaurantName].dishes = {};

            const restaurantContents = fs.readdirSync(restaurantPath, { withFileTypes: true });

            for (const item of restaurantContents) {
                const itemPath = path.join(restaurantPath, item.name).replace(/\\/g, '/');

                if (item.isFile()) {
                    const key = path.parse(item.name).name;
                    // Use a unique placeholder to be replaced later
                    imageMapStructure[restaurantName][key] = `%%REQUIRE%%${itemPath}%%`;
                } else if (item.isDirectory() && item.name === 'dishes') {
                    const dishesPath = itemPath;
                    const dishFolders = fs.readdirSync(dishesPath, { withFileTypes: true });

                    for (const dishFolder of dishFolders) {
                        if (dishFolder.isDirectory()) {
                            const dishName = dishFolder.name;
                            const dishPath = path.join(dishesPath, dishName);
                            imageMapStructure[restaurantName].dishes[dishName] = {};

                            const dishImages = fs.readdirSync(dishPath, { withFileTypes: true });
                            for (const dishImage of dishImages) {
                                if (dishImage.isFile()) {
                                    const dishImageKey = path.parse(dishImage.name).name;
                                    const dishImagePath = path.join(dishPath, dishImage.name).replace(/\\/g, '/');
                                    // Use the same placeholder format
                                    imageMapStructure[restaurantName].dishes[dishName][dishImageKey] = `%%REQUIRE%%${dishImagePath}%%`;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    // Convert the object to a JSON string, which will correctly quote keys
    let jsonString = JSON.stringify(imageMapStructure, null, 2);

    // Use a regular expression to replace the placeholders with actual require() calls
    // This avoids issues with JSON.stringify escaping the require function itself
    jsonString = jsonString.replace(/"%%REQUIRE%%(.*?)%%"/g, "require('../$1')");

    const fileContent = `// This file is auto-generated by a script. Do not edit manually.\n\nexport const imageMap = ${jsonString};\n`;
    
    const outputDir = path.dirname(OUTPUT_FILE);
    if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
    }

    fs.writeFileSync(OUTPUT_FILE, fileContent);
    console.log(`✅ Image map with require() calls successfully generated at ${OUTPUT_FILE}`);

} catch (error) {
    console.error(`❌ Error generating image map: ${error.message}`);
    process.exit(1);
}
